/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Registrant, RegistrantInterface } from "../Registrant";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requiredFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "actual",
        type: "uint256",
      },
    ],
    name: "InsufficientFee",
    type: "error",
  },
  {
    inputs: [],
    name: "Unauthorized",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "eventId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "identityCommitment",
        type: "uint256",
      },
    ],
    name: "Register",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "Withdraw",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_eventId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_identityCommitment",
        type: "uint256",
      },
    ],
    name: "register",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_zkTokenProof",
        type: "address",
      },
    ],
    name: "setZKTokenProof",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "zkTokenProof",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610d718061010d6000396000f3fe6080604052600436106100745760003560e01c80638da5cb5b1161004e5780638da5cb5b146100d4578063a0f6365b146100ff578063d66d6c101461012a578063f2fde38b146101465761007b565b806337ed33431461007d5780633ccfd60b146100a6578063715018a6146100bd5761007b565b3661007b57005b005b34801561008957600080fd5b506100a4600480360381019061009f919061096a565b61016f565b005b3480156100b257600080fd5b506100bb61022f565b005b3480156100c957600080fd5b506100d26103e7565b005b3480156100e057600080fd5b506100e961046f565b6040516100f691906109a6565b60405180910390f35b34801561010b57600080fd5b50610114610498565b60405161012191906109a6565b60405180910390f35b610144600480360381019061013f91906109f7565b6104be565b005b34801561015257600080fd5b5061016d6004803603810190610168919061096a565b610743565b005b61017761083b565b73ffffffffffffffffffffffffffffffffffffffff1661019561046f565b73ffffffffffffffffffffffffffffffffffffffff16146101eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101e290610a94565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61023761083b565b73ffffffffffffffffffffffffffffffffffffffff1661025561046f565b73ffffffffffffffffffffffffffffffffffffffff16146102ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a290610a94565b60405180910390fd5b600047116102ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e590610b00565b60405180910390fd5b60006102f861046f565b73ffffffffffffffffffffffffffffffffffffffff164760405161031b90610b51565b60006040518083038185875af1925050503d8060008114610358576040519150601f19603f3d011682016040523d82523d6000602084013e61035d565b606091505b50509050806103a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039890610bb2565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167ff67611512e0a2d90c96fd3f08dca4971bc45fba9dc679eabe839a32abbe58a8e60405160405180910390a250565b6103ef61083b565b73ffffffffffffffffffffffffffffffffffffffff1661040d61046f565b73ffffffffffffffffffffffffffffffffffffffff1614610463576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045a90610a94565b60405180910390fd5b61046d6000610843565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166321c9dbc8856040518263ffffffff1660e01b81526004016105209190610be1565b60206040518083038186803b15801561053857600080fd5b505afa15801561054c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105709190610c11565b73ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016105a891906109a6565b60206040518083038186803b1580156105c057600080fd5b505afa1580156105d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f89190610c53565b1415610630576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff16636a941026856040518263ffffffff1660e01b815260040161066b9190610be1565b60206040518083038186803b15801561068357600080fd5b505afa158015610697573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bb9190610c53565b9050348111156107045780346040517fa458261b0000000000000000000000000000000000000000000000000000000081526004016106fb929190610c80565b60405180910390fd5b7fe23550ce55546f73f971a932ee4b14cd8070fc95c7da57ac7e4337476b5604d18484604051610735929190610c80565b60405180910390a150505050565b61074b61083b565b73ffffffffffffffffffffffffffffffffffffffff1661076961046f565b73ffffffffffffffffffffffffffffffffffffffff16146107bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b690610a94565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561082f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082690610d1b565b60405180910390fd5b61083881610843565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109378261090c565b9050919050565b6109478161092c565b811461095257600080fd5b50565b6000813590506109648161093e565b92915050565b6000602082840312156109805761097f610907565b5b600061098e84828501610955565b91505092915050565b6109a08161092c565b82525050565b60006020820190506109bb6000830184610997565b92915050565b6000819050919050565b6109d4816109c1565b81146109df57600080fd5b50565b6000813590506109f1816109cb565b92915050565b60008060408385031215610a0e57610a0d610907565b5b6000610a1c858286016109e2565b9250506020610a2d858286016109e2565b9150509250929050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610a7e602083610a37565b9150610a8982610a48565b602082019050919050565b60006020820190508181036000830152610aad81610a71565b9050919050565b7f4e6f7420456e6f7567682042616c616e6365204f6620436f6e74726163740000600082015250565b6000610aea601e83610a37565b9150610af582610ab4565b602082019050919050565b60006020820190508181036000830152610b1981610add565b9050919050565b600081905092915050565b50565b6000610b3b600083610b20565b9150610b4682610b2b565b600082019050919050565b6000610b5c82610b2e565b9150819050919050565b7f5472616e73666572204661696c65640000000000000000000000000000000000600082015250565b6000610b9c600f83610a37565b9150610ba782610b66565b602082019050919050565b60006020820190508181036000830152610bcb81610b8f565b9050919050565b610bdb816109c1565b82525050565b6000602082019050610bf66000830184610bd2565b92915050565b600081519050610c0b8161093e565b92915050565b600060208284031215610c2757610c26610907565b5b6000610c3584828501610bfc565b91505092915050565b600081519050610c4d816109cb565b92915050565b600060208284031215610c6957610c68610907565b5b6000610c7784828501610c3e565b91505092915050565b6000604082019050610c956000830185610bd2565b610ca26020830184610bd2565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610d05602683610a37565b9150610d1082610ca9565b604082019050919050565b60006020820190508181036000830152610d3481610cf8565b905091905056fea264697066735822122065b8e6b9569639b8cde72a37b3bea339c559dfbf6a7afe996d2c967a172cc4c464736f6c63430008090033";

export class Registrant__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Registrant> {
    return super.deploy(overrides || {}) as Promise<Registrant>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Registrant {
    return super.attach(address) as Registrant;
  }
  connect(signer: Signer): Registrant__factory {
    return super.connect(signer) as Registrant__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RegistrantInterface {
    return new utils.Interface(_abi) as RegistrantInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Registrant {
    return new Contract(address, _abi, signerOrProvider) as Registrant;
  }
}
