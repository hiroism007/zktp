/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IZKTokenProofInterface extends ethers.utils.Interface {
  functions: {
    "addMember(uint256,uint256)": FunctionFragment;
    "createEvent(uint256,uint8,uint256,address,string,uint256)": FunctionFragment;
    "eventContractAddressOf(uint256)": FunctionFragment;
    "eventFeeOf(uint256)": FunctionFragment;
    "removeMember(uint256,uint256,uint256[],uint8[])": FunctionFragment;
    "verifyMembership(uint256,bytes32,uint256,uint256,uint256[8])": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addMember",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createEvent",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "eventContractAddressOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "eventFeeOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMember",
    values: [BigNumberish, BigNumberish, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyMembership",
    values: [
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addMember", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eventContractAddressOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eventFeeOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "EventCreated(uint256,uint8,uint256,address,address,string,uint256)": EventFragment;
    "Withdraw(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EventCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type EventCreatedEvent = TypedEvent<
  [BigNumber, number, BigNumber, string, string, string, BigNumber] & {
    eventId: BigNumber;
    depth: number;
    zeroValue: BigNumber;
    contractAddress: string;
    adminAddress: string;
    title: string;
    fee: BigNumber;
  }
>;

export type WithdrawEvent = TypedEvent<[string] & { operator: string }>;

export class IZKTokenProof extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IZKTokenProofInterface;

  functions: {
    addMember(
      _eventId: BigNumberish,
      _identityCommitment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createEvent(
      _eventId: BigNumberish,
      _depth: BigNumberish,
      _zeroValue: BigNumberish,
      _contractAddress: string,
      _title: string,
      _fee: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    eventContractAddressOf(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    eventFeeOf(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removeMember(
      _eventId: BigNumberish,
      _identityCommitment: BigNumberish,
      _proofSiblings: BigNumberish[],
      _proofPathIndices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyMembership(
      _eventId: BigNumberish,
      _signal: BytesLike,
      _nullifierHash: BigNumberish,
      _externalNullifier: BigNumberish,
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addMember(
    _eventId: BigNumberish,
    _identityCommitment: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createEvent(
    _eventId: BigNumberish,
    _depth: BigNumberish,
    _zeroValue: BigNumberish,
    _contractAddress: string,
    _title: string,
    _fee: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  eventContractAddressOf(
    _eventId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  eventFeeOf(
    _eventId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeMember(
    _eventId: BigNumberish,
    _identityCommitment: BigNumberish,
    _proofSiblings: BigNumberish[],
    _proofPathIndices: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyMembership(
    _eventId: BigNumberish,
    _signal: BytesLike,
    _nullifierHash: BigNumberish,
    _externalNullifier: BigNumberish,
    _proof: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addMember(
      _eventId: BigNumberish,
      _identityCommitment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createEvent(
      _eventId: BigNumberish,
      _depth: BigNumberish,
      _zeroValue: BigNumberish,
      _contractAddress: string,
      _title: string,
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    eventContractAddressOf(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    eventFeeOf(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeMember(
      _eventId: BigNumberish,
      _identityCommitment: BigNumberish,
      _proofSiblings: BigNumberish[],
      _proofPathIndices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    verifyMembership(
      _eventId: BigNumberish,
      _signal: BytesLike,
      _nullifierHash: BigNumberish,
      _externalNullifier: BigNumberish,
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "EventCreated(uint256,uint8,uint256,address,address,string,uint256)"(
      eventId?: BigNumberish | null,
      depth?: null,
      zeroValue?: null,
      contractAddress?: string | null,
      adminAddress?: string | null,
      title?: null,
      fee?: null
    ): TypedEventFilter<
      [BigNumber, number, BigNumber, string, string, string, BigNumber],
      {
        eventId: BigNumber;
        depth: number;
        zeroValue: BigNumber;
        contractAddress: string;
        adminAddress: string;
        title: string;
        fee: BigNumber;
      }
    >;

    EventCreated(
      eventId?: BigNumberish | null,
      depth?: null,
      zeroValue?: null,
      contractAddress?: string | null,
      adminAddress?: string | null,
      title?: null,
      fee?: null
    ): TypedEventFilter<
      [BigNumber, number, BigNumber, string, string, string, BigNumber],
      {
        eventId: BigNumber;
        depth: number;
        zeroValue: BigNumber;
        contractAddress: string;
        adminAddress: string;
        title: string;
        fee: BigNumber;
      }
    >;

    "Withdraw(address)"(
      operator?: string | null
    ): TypedEventFilter<[string], { operator: string }>;

    Withdraw(
      operator?: string | null
    ): TypedEventFilter<[string], { operator: string }>;
  };

  estimateGas: {
    addMember(
      _eventId: BigNumberish,
      _identityCommitment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createEvent(
      _eventId: BigNumberish,
      _depth: BigNumberish,
      _zeroValue: BigNumberish,
      _contractAddress: string,
      _title: string,
      _fee: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    eventContractAddressOf(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eventFeeOf(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeMember(
      _eventId: BigNumberish,
      _identityCommitment: BigNumberish,
      _proofSiblings: BigNumberish[],
      _proofPathIndices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyMembership(
      _eventId: BigNumberish,
      _signal: BytesLike,
      _nullifierHash: BigNumberish,
      _externalNullifier: BigNumberish,
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addMember(
      _eventId: BigNumberish,
      _identityCommitment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createEvent(
      _eventId: BigNumberish,
      _depth: BigNumberish,
      _zeroValue: BigNumberish,
      _contractAddress: string,
      _title: string,
      _fee: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    eventContractAddressOf(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eventFeeOf(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeMember(
      _eventId: BigNumberish,
      _identityCommitment: BigNumberish,
      _proofSiblings: BigNumberish[],
      _proofPathIndices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyMembership(
      _eventId: BigNumberish,
      _signal: BytesLike,
      _nullifierHash: BigNumberish,
      _externalNullifier: BigNumberish,
      _proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
